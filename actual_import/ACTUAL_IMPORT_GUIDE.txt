CSV2Actual - ACTUAL BUDGET IMPORT GUIDE
========================================
Version: 1.0
Author: sTLAs (https://github.com/sTLAs)
Release Date: January 6, 2025
Windows Compatibility: Windows 10 (v1607+) and Windows 11
PowerShell Required: Windows PowerShell 5.1+ or PowerShell Core 7.0+

STEP 1: CREATE CATEGORIES
--------------------------
Create ALL of the following categories in Actual Budget:

INCOME CATEGORIES:
- Salary Max
- Salary Anna  
- Tax Refunds
- Capital Gains
- Cash Deposits
- Other Income

EXPENSE CATEGORIES:
- Groceries
- Housing
- Insurance
- Fuel
- Bank Fees
- Pharmacy & Health
- Donations
- Online Shopping
- Public Transportation
- Restaurants & Dining
- Memberships
- Streaming & Subscriptions
- Taxi & Ridesharing
- Electronics & Technology
- Entertainment
- Taxes
- Internet & Phone
- Clothing
- Education

TRANSFER CATEGORIES:
- Transfer (Household Contribution)
- Transfer to Anna-Checking
- Transfer to Anna-Savings
- Transfer to Anna-Variable
- Transfer to Household-Account
- Transfer to Mortgage
- Transfer to Mortgage-Subsidy
- Transfer to Max-Checking
- Transfer from Anna-Checking
- Transfer from Anna-Savings
- Transfer from Anna-Variable
- Transfer from Household-Account
- Transfer from Max-Checking
- Transfer from Max-Variable

IMPORTANT: Categories must be created in Actual EXACTLY as they appear above!

STEP 2: CREATE ACCOUNTS
-----------------------
Create the following accounts in Actual Budget:
- Anna-Checking
- Credit-Card
- Household-Account
- Max-Checking

NOTE: Account names correspond to the CSV filenames. Add additional
accounts as needed based on your config.json settings.

STEP 3: SET STARTING BALANCES  
-----------------------------
Run the balance calculator to get current starting balances:

ENGLISH:
powershell -ExecutionPolicy Bypass -File calculate_starting_balances.ps1 -Language en

GERMAN:
powershell -ExecutionPolicy Bypass -File calculate_starting_balances.ps1 -Language de

This will create 'starting_balances.txt' with exact values to enter in Actual Budget.

STEP 4: IMPORT CSV FILES
------------------------
1. Go to the desired account in Actual Budget
2. Click on "Import transactions"
3. Select the corresponding CSV file from actual_import/ folder
4. Configure field mapping:
   - Date -> date column (YYYY-MM-DD format)
   - Account -> account column  
   - Payee -> payee column
   - Notes -> notes column
   - Category -> category column
   - Amount -> amount column (decimal with dot separator)
5. Review and import

FILES TO IMPORT:
- Anna_Checking.csv -> Import to Anna-Checking account
- Credit_Card.csv -> Import to Credit-Card account  
- Household_Account.csv -> Import to Household-Account account
- Max_Checking.csv -> Import to Max-Checking account

STEP 5: CONFIGURE TRANSFERS
---------------------------
Transactions with category "Transfer *" are internal transfers between your accounts.
You can:
- Leave them as expense/income categories for simple tracking
- Or configure them as real transfers in Actual Budget for double-entry accounting

STEP 6: ADJUST CATEGORIES
-------------------------
Auto-categorization achieves ~70% accuracy. Review and adjust:
1. Check uncategorized transactions (empty category field)
2. Verify auto-assigned categories are correct
3. Create additional custom categories as needed
4. Update config.json patterns for better future categorization

STEP 7: CREATE BUDGET  
---------------------
Create your budget based on the imported historical data:
1. Review spending patterns by category
2. Set realistic budget amounts based on historical averages
3. Account for seasonal variations
4. Plan for irregular expenses

CONFIGURATION FOR YOUR DATA:
----------------------------
1. Edit config.json to customize:
   - User names and salary patterns under "users" section
   - Your IBAN numbers under "accounts.ibanMapping"  
   - Categorization patterns under "categorization" section
   - Account names and templates

2. Place your bank CSV exports in source/ folder

3. Run the processor:
   ENGLISH: powershell -ExecutionPolicy Bypass -File bank_csv_processor.ps1 -Language en
   GERMAN:  powershell -ExecutionPolicy Bypass -File bank_csv_processor.ps1 -Language de

4. Calculate starting balances:
   powershell -ExecutionPolicy Bypass -File calculate_starting_balances.ps1 -Language en

5. For beginners, use the interactive wizard:
   powershell -ExecutionPolicy Bypass -File CSV2Actual.ps1 -Language en

TECHNICAL NOTES:
---------------
- Date format: YYYY-MM-DD (ISO 8601 standard)
- Amounts: Dot as decimal separator (e.g., 123.45)
- Encoding: UTF-8 throughout
- CSV Delimiter: Comma
- PowerShell: Requires Windows PowerShell 5.1+ or PowerShell Core 7.0+
- Windows: Compatible with Windows 10 (v1607+) and Windows 11

TROUBLESHOOTING:
---------------
If imports fail:
1. Verify all categories exist in Actual Budget
2. Check starting balances are set correctly
3. Ensure no duplicate transactions
4. Validate CSV file encoding (should be UTF-8)
5. Use DryRun mode for detailed diagnosis: bank_csv_processor.ps1 -DryRun

For categorization issues:
1. Review config.json categorization patterns
2. Check user and salary pattern configurations
3. Verify IBAN mappings for transfer recognition
4. Test with dry-run mode: bank_csv_processor.ps1 -DryRun

LANGUAGE SUPPORT:
----------------
All scripts support both English and German:
- Add -Language en for English output
- Add -Language de for German output  
- Default is English if not specified

Example:
powershell -ExecutionPolicy Bypass -File bank_csv_processor.ps1 -Language de -Silent

PERFORMANCE EXPECTATIONS:
------------------------
- Categorization Rate: 60-70% automatic assignment
- Transfer Recognition: 95%+ with proper IBAN mapping
- Processing Speed: ~1-2 seconds per file
- File Size Support: Tested with files up to 1000+ transactions